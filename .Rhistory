}
# Card draws formula: P(A') = 1 * (51/52) * ... * (52-n+1)/52
cards_prob <- function(n) {
if (n == 0) return(0)
prob_no_shared <- 1
for (i in 0:(n-1)) {
prob_no_shared <- prob_no_shared * (52 - i) / 52
}
return(1 - prob_no_shared)
}
# Coin flips formula: P(A') = 1 * (1/2) * ... * (2-n+1)/2
coin_prob <- function(n) {
if (n == 0) return(0)
prob_no_shared <- 1
for (i in 0:(n-1)) {
prob_no_shared <- prob_no_shared * (2 - i) / 2
}
return(1 - prob_no_shared)
}
# Simulate events
simulate_event <- function(n, type) {
if (type == "Birthday Paradox") {
outcomes <- sample(1:365, n, replace = TRUE)
} else if (type == "Dice Rolls") {
outcomes <- sample(1:6, n, replace = TRUE)
} else if (type == "Card Draws") {
outcomes <- sample(1:52, n, replace = TRUE)
} else if (type == "Coin Flips") {
outcomes <- sample(c("Heads", "Tails"), n, replace = TRUE)
}
duplicates <- duplicated(outcomes)
return(list(outcomes = outcomes, duplicates = duplicates))
}
# Run multiple simulations to count repeated outcomes
run_multiple_simulations <- function(n, iterations, type) {
repeated_counts <- numeric(iterations)
for (i in 1:iterations) {
sim <- simulate_event(n, type)
repeated_counts[i] <- sum(sim$duplicates)
}
return(repeated_counts)
}
# UI for the Shiny app
ui <- fluidPage(
titlePanel("Exploring the Birthday Paradox and Related Probabilities"),
sidebarLayout(
sidebarPanel(
h3("Understanding the Birthday Paradox"),
p("This app focuses on the Birthday Paradox, exploring the probability of at least two people in a group sharing the same birthday."),
p("To build further intuition, it allows comparisons with other scenarios, such as repeated outcomes in dice rolls, card draws, and coin flips."),
selectInput("event_type", "Select Event:",
choices = c("Birthday Paradox", "Dice Rolls", "Card Draws", "Coin Flips"),
selected = "Birthday Paradox"),
# Problem description based on the event type
uiOutput("problem_description"),
hr(),
# Probability equation based on the event type
h4("Probability Equation"),
uiOutput("equation"),  # Display the probability equation dynamically
hr(),
sliderInput("num_samples", "Number of Samples (Group Size for Birthday Paradox):",
min = 1, max = 365, value = 23),
actionButton("simulate", "Simulate"),
br(),
h4("Probability Meter"),
uiOutput("probMeter"),  # Dynamic probability meter
helpText("Displays the probability of observing a shared birthday or repeated outcome based on the selected scenario."),
hr(),
sliderInput("num_runs", "Number of Repeated Runs:", min = 1, max = 2000, value = 50),
actionButton("runSimulation", "Run Repeated Runs"),
hr(),
),
mainPanel(
plotOutput("probPlot"),
textOutput("probText"),
hr(),
h4("Repeated Runs Simulation Results"),
plotOutput("simulationPlot"),  # Visualizes simulation outcomes and repeats
helpText("Visualizes the outcomes of repeated runs, highlighting where repeated outcomes occur.")
)
)
)
# Server logic
server <- function(input, output, session) {
# Update the slider range based on selected event
observeEvent(input$event_type, {
if (input$event_type == "Birthday Paradox") {
updateSliderInput(session, "num_samples", min = 1, max = 366, value = 23)
} else if (input$event_type == "Dice Rolls") {
updateSliderInput(session, "num_samples", min = 1, max = 10, value = 2)
} else if (input$event_type == "Card Draws") {
updateSliderInput(session, "num_samples", min = 1, max = 60, value = 2)
} else if (input$event_type == "Coin Flips") {
updateSliderInput(session, "num_samples", min = 1, max = 6, value = 2)
}
})
# Display unique problem descriptions for each event
output$problem_description <- renderUI({
event <- input$event_type
description <- switch(event,
"Birthday Paradox" = "In the birthday paradox, we explore the probability of at least two people sharing the same birthday in a group of randomly chosen individuals.",
"Dice Rolls" = "In the dice rolls scenario, we examine the likelihood of getting the same number at least once when rolling a fair die multiple times.",
"Card Draws" = "In the card draws scenario, we consider the probability of drawing the same card value more than once in a sequence of card draws from a standard deck.",
"Coin Flips" = "In the coin flips scenario, we investigate the probability of getting the same result (either heads or tails) at least once when flipping a fair coin multiple times.")
tags$p(strong("Problem Description: "), description)
})
# Display the probability equation dynamically
# Display the probability equation dynamically using MathJax with proper math formatting
output$equation <- renderUI({
event <- input$event_type
formula <- switch(event,
"Birthday Paradox" = "$$P(A') = 1 \\times \\frac{364}{365} \\times \\frac{363}{365} \\times \\cdots \\times \\frac{365 - n + 1}{365}$$",
"Dice Rolls" = "$$P(A') = 1 \\times \\frac{5}{6} \\times \\frac{4}{6} \\times \\cdots \\times \\frac{6 - n + 1}{6}$$",
"Card Draws" = "$$P(A') = 1 \\times \\frac{51}{52} \\times \\frac{50}{52} \\times \\cdots \\times \\frac{52 - n + 1}{52}$$",
"Coin Flips" = "$$P(A') = 1 \\times \\frac{1}{2} \\times \\cdots \\times \\frac{2 - n + 1}{2}$$")
withMathJax(
tags$p(strong("Probability Formula: "), formula)
)
})
# Simulate based on the selected event
observeEvent(input$simulate, {
n <- input$num_samples
event <- input$event_type
prob <- 0
if (event == "Birthday Paradox") {
prob <- birthday_prob(n)
} else if (event == "Dice Rolls") {
prob <- dice_prob(n)
} else if (event == "Card Draws") {
prob <- cards_prob(n)
} else if (event == "Coin Flips") {
prob <- coin_prob(n)
}
# Output the probability text
output$probText <- renderText({
paste("With", n, "samples, the probability of observing a repeated outcome at least once in the selected scenario is approximately", round(prob * 100, 3), "%.")
})
# Create a sequence for plotting the probability
max_samples <- switch(input$event_type,
"Birthday Paradox" = 366,
"Dice Rolls" = 10,
"Card Draws" = 60,
"Coin Flips" = 6)
samples_seq <- 1:max_samples
prob_seq <- sapply(samples_seq, switch(input$event_type,
"Birthday Paradox" = birthday_prob,
"Dice Rolls" = dice_prob,
"Card Draws" = cards_prob,
"Coin Flips" = coin_prob))
# Plot the probability curve
output$probPlot <- renderPlot({
ggplot(data = data.frame(samples = samples_seq, probability = prob_seq), aes(x = samples, y = probability)) +
geom_line(color = "blue", size = 1.2) +
geom_vline(xintercept = n, linetype = "dashed", color = "red") +
ggtitle(paste("Probability of Repeated Outcome for", event)) +
xlab("Number of Samples (n)") +
ylab("Probability") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
theme_minimal()
})
# Probability meter
output$probMeter <- renderUI({
progressBarColor <- ifelse(prob > 0.5, "bg-danger", "bg-success")
shiny::tags$div(class = "progress",
shiny::tags$div(class = paste("progress-bar", progressBarColor),
role = "progressbar", style = paste0("width:", round(prob * 100), "%;"),
paste(round(prob * 100, 2), "%")))
})
})
# Run repeated runs simulation
observeEvent(input$runSimulation, {
n <- input$num_samples
iterations <- input$num_runs
event <- input$event_type
repeated_counts <- run_multiple_simulations(n, iterations, event)
# Plot the repeated outcome counts
output$simulationPlot <- renderPlot({
ggplot(data = data.frame(repeated_counts), aes(x = repeated_counts)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
xlab("Number of Repeated Samples") +
ylab("Frequency in Iterations") +
ggtitle("Distribution of Repeated Outcomes Across Iterations") +
theme_minimal()
})
})
}
# Run the shiny app
shinyApp(ui, server)
}
# Run the app
run_birthday_paradox_app()
ProbabilityConceptVisualizer::run_distribution_visualizer_app()
#' Statistical Concepts Explorer: CLT and WLLN
#'
#' This Shiny app allows users to explore two foundational statistical concepts:
#' the Central Limit Theorem (CLT) and the Weak Law of Large Numbers (WLLN).
#' Users can select either concept, choose parameters for different distributions
#' or experiments, and visualize the respective results.
#'
#' @import zoo
#' @import shiny
#' @examples
#' \dontrun{
#' run_clt_wlln_app() # This function runs the Shiny app.
#' }
#'
#' @export
run_clt_wlln_app <- function() {
library(shiny)
library(zoo)
# Define UI
ui <- fluidPage(
titlePanel("Visualizing Central Limit Theorem and Weak Law of Large Numbers"),
sidebarLayout(
sidebarPanel(
# Dropdown to select either CLT or LLN
selectInput("appMode", "Select Mode:", choices = c("Central Limit Theorem", "Weak Law of Large Numbers")),
# Conditional Panels for each mode
conditionalPanel(
condition = "input.appMode == 'Central Limit Theorem'",
selectInput("dist", "Distribution Type:",
choices = c("Uniform", "Exponential", "Binomial")),
conditionalPanel(
condition = "input.dist == 'Uniform'",
numericInput("min", "Minimum (a):", value = 0),
numericInput("max", "Maximum (b):", value = 1)
),
conditionalPanel(
condition = "input.dist == 'Exponential'",
numericInput("rate", "Rate (λ):", value = 1)
),
conditionalPanel(
condition = "input.dist == 'Binomial'",
numericInput("size", "Size (n):", value = 10),
numericInput("prob", "Probability (p):", value = 0.5)
),
sliderInput("sampleSize", "Sample Size (n):", min = 50, max = 5000, value = 300),
sliderInput("numSamples", "Number of Samples:", min = 100, max = 10000, value = 1000),
sliderInput("bins", "Histogram Bins:", min = 5, max = 50, value = 20),
checkboxInput("showNormal", "Show Theoretical Normal Curve", value = TRUE)
),
conditionalPanel(
condition = "input.appMode == 'Weak Law of Large Numbers'",
selectInput("experiment", "Experiment Type:",
choices = c("Coin Flip", "Dice Roll", "Beta Distribution")),
conditionalPanel(
condition = "input.experiment == 'Beta Distribution'",
numericInput("alpha", "Alpha (α):", value = 2),
numericInput("beta", "Beta (β):", value = 5)
),
sliderInput("numTrials", "Number of Trials:", min = 10, max = 5000, value = 100),
sliderInput("windowSize", "Rolling Average Window:", min = 1, max = 100, value = 10),
checkboxInput("showMean", "Show Theoretical Mean", value = TRUE)
)
),
mainPanel(
plotOutput("mainPlot"),
textOutput("description")
)
)
)
# Define server logic
server <- function(input, output) {
output$mainPlot <- renderPlot({
# Central Limit Theorem logic
if (input$appMode == "Central Limit Theorem") {
dist <- switch(input$dist,
"Uniform" = function(n) runif(n, min = input$min, max = input$max),
"Exponential" = function(n) rexp(n, rate = input$rate),
"Binomial" = function(n) rbinom(n, size = input$size, prob = input$prob))
sampleMeans <- replicate(input$numSamples, mean(dist(input$sampleSize)))
par(mfrow = c(1, 2)) # Two-panel layout
# Original distribution
hist(dist(input$sampleSize), main = "Original Distribution", col = "lightblue", border = "white", breaks = input$bins)
# Sample means distribution
hist(sampleMeans, main = "Distribution of Sample Means", col = "lightgreen", border = "white", breaks = input$bins)
# Adding the theoretical normal curve if requested
if (input$showNormal) {
curve(dnorm(x, mean = mean(sampleMeans), sd = sd(sampleMeans)), add = TRUE, col = "red", lwd = 2)
}
} else if (input$appMode == "Weak Law of Large Numbers") {
# Weak Law of Large Numbers logic
set.seed(123)
trials <- switch(input$experiment,
"Coin Flip" = sample(c(0, 1), input$numTrials, replace = TRUE),
"Dice Roll" = sample(1:6, input$numTrials, replace = TRUE),
"Beta Distribution" = rbeta(input$numTrials, input$alpha, input$beta))
cumulativeAvg <- cumsum(trials) / seq_along(trials)
windowSize <- input$windowSize
rollingAvg <- rollmean(cumulativeAvg, k = windowSize, fill = NA)
# Plot cumulative and rolling averages
plot(cumulativeAvg, type = "l", col = "blue", lwd = 2,
ylim = range(c(cumulativeAvg, rollingAvg), na.rm = TRUE),
ylab = "Cumulative Average / Rolling Average", xlab = "Number of Trials",
main = paste("Convergence with Rolling Average (Window =", windowSize, ")"))
# Add rolling average to the plot
lines(rollingAvg, col = "green", lwd = 2, lty = 2)
# Show theoretical mean if checkbox is checked
trueMean <- if (input$experiment == "Coin Flip") 0.5 else if (input$experiment == "Dice Roll") 3.5 else mean(rbeta(10000, input$alpha, input$beta))
if (input$showMean) {
abline(h = trueMean, col = "red", lty = 2)
}
}
})
output$description <- renderText({
# Description for each mode
if (input$appMode == "Central Limit Theorem") {
paste0("The Central Limit Theorem states that as the sample size increases, ",
"the distribution of sample means approaches a normal distribution, ",
"regardless of the population distribution.")
} else {
paste("The Weak Law of Large Numbers shows that as the number of trials increases, ",
"the sample mean converges to the expected value. ",
"The rolling average window smooths the data over the specified window size.")
}
})
}
# Run the Shiny app
shinyApp(ui, server)
}
# run_clt_wlln_app()
ProbabilityConceptVisualizer::run_clt_wlln_app()
ProbabilityConceptVisualizer::run_markov_chain_visualizer()
runApp('R/markovchain.R')
#' Run the Two Experiments Visualization Shiny App
#'
#' This function launches a Shiny app that visualizes the outcomes of two experiments (Coin Toss or Dice Roll).
#' Users can select experiment types, choose outcomes, and interactively visualize probabilities and outcomes.
#'
#' Features:
#' - Select between "Coin Toss" or "Dice Roll" for two experiments.
#' - Choose specific outcomes for each event or explore an interactive mode.
#' - Visualize the probability and outcomes on a 2D plot.
#'
#' @return A Shiny app instance that runs locally in your browser.
#'
#' @import ggplot2
#' @import shiny
#' @import dplyr
#' @examples
#' \dontrun{
#' run_two_experiments_app() # Run shiny app
#' }
#'
#' @export
run_two_experiments_app <- function() {
library(shiny)
library(ggplot2)
library(dplyr)
ui <- fluidPage(
titlePanel("Two Experiments Visualization"),
sidebarLayout(
sidebarPanel(
h4("Select Experiment Types"),
checkboxInput("interactive", "Interactive Mode", FALSE),
selectInput("eventType1", "First Experiment Type:", choices = c("Coin Toss", "Dice Roll")),
selectInput("eventType2", "Second Experiment Type:", choices = c("Coin Toss", "Dice Roll")),
uiOutput("event1Choices"),  # Outcome selection for Event 1
uiOutput("event2Choices"),  # Outcome selection for Event 2
actionButton("reset", "Reset Selection")
),
mainPanel(
plotOutput("eventPlot", hover = hoverOpts(id = "plot_hover"), click = "plot_click"),
br(),
h4("Probability Calculations"),
textOutput("totalOutcomes"),
textOutput("favorableOutcomes"),
textOutput("probability"),
br(),
textOutput("hoverInfo")  # Hover info display
)
)
)
server <- function(input, output, session) {
selected_outcomes <- reactiveVal(data.frame(First_Event = character(), Second_Event = character(), stringsAsFactors = FALSE))
output$event1Choices <- renderUI({
if (!input$interactive) {
if (input$eventType1 == "Coin Toss") {
checkboxGroupInput("event1", "First Experiment Outcomes:", choices = c("Head", "Tail"))
} else {
checkboxGroupInput("event1", "First Experiment Outcomes:", choices = as.character(1:6))
}
}
})
output$event2Choices <- renderUI({
if (!input$interactive) {
if (input$eventType2 == "Coin Toss") {
checkboxGroupInput("event2", "Second Experiment Outcomes:", choices = c("Head", "Tail"))
} else {
checkboxGroupInput("event2", "Second Experiment Outcomes:", choices = as.character(1:6))
}
}
})
observeEvent(list(input$eventType1, input$eventType2, input$reset), {
selected_outcomes(data.frame(First_Event = character(), Second_Event = character(), stringsAsFactors = FALSE))
})
observeEvent(input$plot_click, {
if (input$interactive) {
click_data <- input$plot_click
outcomes1 <- if (input$eventType1 == "Coin Toss") c("Head", "Tail") else as.character(1:6)
outcomes2 <- if (input$eventType2 == "Coin Toss") c("Head", "Tail") else as.character(1:6)
clicked_event1 <- round(click_data$x)
clicked_event2 <- round(click_data$y)
if (clicked_event1 %in% 1:length(outcomes1) && clicked_event2 %in% 1:length(outcomes2)) {
clicked_outcome1 <- outcomes1[clicked_event1]
clicked_outcome2 <- outcomes2[clicked_event2]
selected <- selected_outcomes()
new_selection <- data.frame(First_Event = clicked_outcome1, Second_Event = clicked_outcome2, stringsAsFactors = FALSE)
if (any(selected$First_Event == clicked_outcome1 & selected$Second_Event == clicked_outcome2)) {
selected <- selected %>%
filter(!(First_Event == clicked_outcome1 & Second_Event == clicked_outcome2))
} else {
selected <- rbind(selected, new_selection)
}
selected_outcomes(selected)
}
}
})
output$totalOutcomes <- renderText({
total_outcomes <- (if (input$eventType1 == "Coin Toss") 2 else 6) * (if (input$eventType2 == "Coin Toss") 2 else 6)
paste("Total Possible Outcomes:: ", total_outcomes)
})
output$favorableOutcomes <- renderText({
if (input$interactive) {
favorable_outcomes <- nrow(selected_outcomes())
} else {
outcomes1 <- if (input$eventType1 == "Coin Toss") c("Head", "Tail") else as.character(1:6)
outcomes2 <- if (input$eventType2 == "Coin Toss") c("Head", "Tail") else as.character(1:6)
outcomes <- expand.grid(First_Event = outcomes1, Second_Event = outcomes2)
selected_event <- with(outcomes, First_Event %in% input$event1 & Second_Event %in% input$event2)
favorable_outcomes <- sum(selected_event)
}
paste("Favourable Outcomes:: ", favorable_outcomes)
})
output$probability <- renderText({
total_outcomes <- (if (input$eventType1 == "Coin Toss") 2 else 6) * (if (input$eventType2 == "Coin Toss") 2 else 6)
if (input$interactive) {
favorable_outcomes <- nrow(selected_outcomes())
} else {
outcomes1 <- if (input$eventType1 == "Coin Toss") c("Head", "Tail") else as.character(1:6)
outcomes2 <- if (input$eventType2 == "Coin Toss") c("Head", "Tail") else as.character(1:6)
outcomes <- expand.grid(First_Event = outcomes1, Second_Event = outcomes2)
selected_event <- with(outcomes, First_Event %in% input$event1 & Second_Event %in% input$event2)
favorable_outcomes <- sum(selected_event)
}
probability <- favorable_outcomes / total_outcomes
paste("Probability: ", round(probability, 4))
})
output$hoverInfo <- renderText({
hover_data <- input$plot_hover
if (!is.null(hover_data)) {
outcomes1 <- if (input$eventType1 == "Coin Toss") c("Head", "Tail") else as.character(1:6)
outcomes2 <- if (input$eventType2 == "Coin Toss") c("Head", "Tail") else as.character(1:6)
# Get the hovered point
hovered_event1 <- round(hover_data$x)
hovered_event2 <- round(hover_data$y)
if (hovered_event1 %in% 1:length(outcomes1) && hovered_event2 %in% 1:length(outcomes2)) {
paste0("Hovered Outcome: (", outcomes1[hovered_event1], ", ", outcomes2[hovered_event2], ")")
}
}
})
output$eventPlot <- renderPlot({
outcomes1 <- if (input$eventType1 == "Coin Toss") c("Head", "Tail") else as.character(1:6)
outcomes2 <- if (input$eventType2 == "Coin Toss") c("Head", "Tail") else as.character(1:6)
outcomes <- expand.grid(First_Event = outcomes1, Second_Event = outcomes2)
outcomes$Color <- "#D0D0D0"
if (input$interactive) {
selected <- selected_outcomes()
for (i in 1:nrow(selected)) {
outcomes$Color[outcomes$First_Event == selected$First_Event[i] & outcomes$Second_Event == selected$Second_Event[i]] <- "#FF5733"
}
} else {
selected_event <- with(outcomes, First_Event %in% input$event1 & Second_Event %in% input$event2)
outcomes$Color[selected_event] <- "#FF5733"
}
ggplot(outcomes, aes(x = as.factor(First_Event), y = as.factor(Second_Event))) +
geom_tile(aes(fill = Color), color = "black", width = 1, height = 1) +
scale_fill_identity() +
theme_minimal() +
labs(x = paste(input$eventType1, "(First Experiment)"),
y = paste(input$eventType2, "(Second Experiment)"),
title = "Outcome Visualization for Two Experiments") +
theme(axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
panel.grid = element_blank())
})
}
shinyApp(ui = ui, server = server)
}
# run_two_experiments_app()
ProbabilityConceptVisualizer::run_probability_tree_app()
ProbabilityConceptVisualizer::run_two_experiments_app()
devtools::load_all()
ProbabilityConceptVisualizer::run_markov_chain_visualizer()
devtools::load_all()
rm(list = c("run_birthday_paradox_app", "run_clt_wlln_app", "run_two_experiments_app"))
ProbabilityConceptVisualizer::run_markov_chain_visualizer()
output$state_diagram <- renderPlot({
s
sa
s
as})
devtools::load_all()
ProbabilityConceptVisualizer::run_markov_chain_visualizer()
devtools::load_all()
ProbabilityConceptVisualizer::run_markov_chain_visualizer()
devtools::load_all()
ProbabilityConceptVisualizer::run_markov_chain_visualizer()
devtools::load_all()
ProbabilityConceptVisualizer::run_markov_chain_visualizer()
rmarkdown::render()
rmarkdown::render("README.Rmd")
